stages:
  - checkup_deployment
  - build_pipeline_images
  - checkup
  - test
  - build_apt
  - deploy
  - test_apt_install
  - build_docker

variables:
  MAIN_BRANCH_NAME: "master"

include:
  - remote: 'https://gitlab.wexample.com/wexample-public/ci-cd/-/raw/main/.gitlab-ci.build-image.yml'

# Rules when branch has been merged.
.merge_branch_rules: &merge-branch-master-rules
  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH_NAME'

.merge_to_master:
  resource_group: main_pipeline
  rules:
    - *merge-branch-master-rules

.on_master:
  resource_group: main_pipeline
  only:
    - master

.build_live_image:
  extends: [ .merge_to_master, .globals, .docker_login, .build_image_app ]
  script:
    - !reference [ .docker_login, script ]
    - !reference [ .build_image_app, script ]

checkup_docker:
  stage: checkup_deployment
  image: docker
  extends: [ .merge_to_master ]
  script:
    - docker rm -f wex_test_remote
    - docker rmi gitlab-docker.wexample.com/wexample/wex/rc:latest
    - docker rmi gitlab-docker.wexample.com/wexample/wex/test-remote
    - docker system prune -a

checkup_remote:
  stage: checkup_deployment
  extends: [ .merge_to_master ]
  image: gitlab-docker.wexample.com/wexample-public/docker/wex:latest
  script:
    - REMOTE_ENV=$(wex app::branch/env -b ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME})
    - echo "Checking remote environment for deployment on ${REMOTE_ENV}"
    # Check target environment is ready to receive hooks
    - DEPLOYMENT_SERVER_STATUS=$(wex app::remote/available -e ${REMOTE_ENV})
    - if [ "$DEPLOYMENT_SERVER_STATUS" != "True" ]; then echo "$DEPLOYMENT_SERVER_STATUS" && exit 1; fi

build_pipeline_image_rc:
  stage: build_pipeline_images
  extends: [ .build_live_image ]
  needs:
    - checkup_docker
    - checkup_remote
  variables:
    FLAVOR: rc

build_pipeline_image_test_remote:
  stage: build_pipeline_images
  extends: [ .build_live_image ]
  variables:
    FLAVOR: test-remote
  rules:
    - *merge-branch-master-rules
    - changes:
        - .wex/docker/Dockerfile.test-remote

checkup_pipeline_image_rc:
  stage: checkup
  image: gitlab-docker.wexample.com/wexample/wex/rc
  extends: [ .merge_to_master ]
  needs:
    - build_pipeline_image_rc
  script:
    - wex hi
    - wex version

checkup_pipeline_image_remote:
  stage: checkup
  image: gitlab-docker.wexample.com/wexample/wex/test-remote
  extends: [ .merge_to_master ]
  needs:
    - job: build_pipeline_image_test_remote
      optional: true
  script:
    - wex hi
    - wex version

.checkup_install:
  stage: checkup
  image: gitlab-docker.wexample.com/wexample/wex/rc:latest
  extends: [ .merge_to_master ]
  resource_group: main_pipeline
  needs:
    - checkup_pipeline_image_rc
    - job: checkup_pipeline_image_remote
      optional: true
  variables:
    GIT_STRATEGY: none
  before_script:
    # Prepare checks
    - cd /opt/wex
    - source .wex/python/venv/bin/activate
    - pip install -r requirements-dev.txt
    - touch .wex/.env # Need a fake file to not warn if missing
  after_script:
    # Fail if some code has not been formatted
    - git diff
    - git diff-index --quiet HEAD -- || exit 1

checkup_code:
  extends: [ .checkup_install ]
  script:
    - wex .code/check

checkup_format:
  extends: [ .checkup_install ]
  script:
    - wex .code/format

.test_cleanup:
  script:
    - docker ps -q --filter name=test_app_ | xargs -r docker rm -f
    - docker ps -q --filter name=wex_proxy_test_ | xargs -r docker rm -f
    - rm -rf /var/www/test
    - rm -rf /var/www/test_*

# Use this into test job to use last repo,
# instead of rebuilding "rc" image.
.test_rescue:
  script:
    - rm -rf /opt/wex
    - cp -r . /opt/wex
    - bash /opt/wex/cli/install

test:
  stage: test
  image: gitlab-docker.wexample.com/wexample/wex/rc:latest
  extends: [ .merge_to_master, .test_cleanup ]
  needs:
    - checkup_code
    - checkup_format
  services:
    - name: gitlab-docker.wexample.com/wexample/wex/test-remote:latest
      alias: wex_test_remote
  variables:
    GIT_STRATEGY: none
    TEST_REMOTE_ADDRESS: wex_test_remote
  script:
    # Debug - !reference [ .test_rescue, script ]
    - !reference [ .test_cleanup, script ]
    # Change environment
    - sudo wex app::env/set --app-dir /opt/wex/ -e test
    - sudo wex rebuild
    # Run tests, as "owner", with sudo.
    - sudo -u owner sudo wex test -vvv
    - !reference [ .test_cleanup, script ]

build_apt:
  stage: build_apt
  image: gitlab-docker.wexample.com/wexample-public/docker/wex:build
  extends: [ .on_master ]
  script:
    - BUILD_VERSION=$(cat version.txt)
    # Create build folder outside shared volume
    - mkdir -p /var/tmp/build
    # Create a copy of current git repo
    - cp -r .git /var/tmp/build
    # Go to build folder
    - cd /var/tmp/build
    # Checkout build branch
    - git fetch && git checkout build
    # Create link to source
    - ln -s ${CI_PROJECT_DIR} source
    # Build
    - sudo python3 /var/tmp/build/script/build.py -n wex -gid ${CI_PROJECT_ID} -gtk ${WEX_BUILD_TOKEN} -v ${BUILD_VERSION}

deploy:
  stage: deploy
  image: curlimages/curl
  extends: [ .on_master ]
  needs:
    - build_apt
  script:
    - BUILD_VERSION=$(cat version.txt)
    # Ask apt repo to publish release
    - curl "http://wexample.com:4242/webhook/app/prod/wex-apt-repo/apt/publish?p=${CI_PROJECT_ID}&v=${BUILD_VERSION}"

.test_apt_install:
  extends: [ .on_master ]
  script:
    # Stops script on failure
    - set -e
    - apt update
    - apt install gnupg2 wget -y
    - wget -O - https://apt.wexample.com/gpg | apt-key add -
    - echo "deb http://apt.wexample.com/ stable main" | tee /etc/apt/sources.list.d/wexample.list
    - apt update
    - apt install wex -y
    - wex hi
    # Compare versions
    - BUILD_VERSION=$(cat version.txt) && echo "Deployed version should be ${BUILD_VERSION}"
    - CURRENT_VERSION=$(wex version) && echo "Image version is ${CURRENT_VERSION}"
    - test "$(cat version.txt)" = "$(wex version)" || exit 1
    # Uninstall
    - apt remove wex -y
  needs:
    - deploy

# Try to install using the new debian apt repository.
test_apt_install_debian:
  extends: .test_apt_install
  stage: test_apt_install
  image: gitlab-docker.wexample.com/wexample-public/docker/debian

# Try to install using the new debian apt repository.
test_apt_install_ubuntu:
  extends: .test_apt_install
  stage: test_apt_install
  image: ubuntu:22.04

# Rebuild public image
build_docker:
  stage: build_docker
  extends: [ .on_master ]
  needs:
    - test_apt_install_debian
    - test_apt_install_ubuntu
  trigger:
    project: wexample-public/docker
    branch: main